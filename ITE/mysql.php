<?php

namespace ITE\db;

/**
 * Class that manages mysql connection
 * 
 * @copyright   Copyright © 2007-2014 Fran Díaz
 * @author      Fran Díaz <fran.diaz.gonzalez@gmail.com>
 * @license     http://opensource.org/licenses/MIT
 * @package     ITE
 * @access      public
 * 
 */
use \mysqli;

class mysql implements dbInterface {

    public $dbserver;
    public $dbuser;
    public $dbpassword;
    public $db;
    public $dbhash;
    public $descriptor;
    public $result;
    public $order = 'DESC';
    public $order_by = null;
    public $max_rows_limit = 1000;
    public $short_columns = array();
    public $columns = array();
    public $tables_config;
    public $fields_config;
    public $external_data;
    public $cache_queries = false;
    public $container;

    public function __construct($container) {
        $this->container = $container;
        $this->dbserver = (defined("DBSERVER")) ? DBSERVER : "localhost";
        $this->dbuser = (defined("DBUSER")) ? DBUSER : "default_user";
        $this->dbpassword = (defined("DBPASS")) ? DBPASS : "default_password";
        $this->db = (defined("DB")) ? DB : "default_db";
        $this->dbhash = md5($this->dbserver . $this->dbuser . $this->dbpassword . $this->db);
        $this->bd_connect();

        if ($this->dbuser == "default_user" && $this->dbpassword == "default_password" && $this->db == "default_db") {
            $this->container->__warn("Enlace a BDD temporal: default DB parameters.");
        }
    }

    /**
     * Function that reconnects to other database different from default
     * 
     * @param string $server Database server url to connect (Ex. domain.com:3306) Default port is 3306 if none is specified.
     * @param string $user Database user
     * @param string $pass Database password for user
     * @param string $db Database name
     * @return boolean $this->bd_connect result
     */
    public function reconnect($server, $user, $pass, $db) {
        $this->dbserver = $server;
        $this->dbuser = $user;
        $this->dbpassword = $pass;
        $this->db = $db;
        $this->dbhash = md5($this->dbserver . $this->dbuser . $this->dbpassword . $this->db);
        return $this->bd_connect();
    }

    /**
     * Function that connects to database from current defined parameters
     * 
     * @return boolean If connection was realized true, else false.
     */
    public function bd_connect() {
        $this->descriptor = new mysqli($this->dbserver, $this->dbuser, $this->dbpassword, $this->db);
        if ($this->descriptor->connect_errno) {
            if ($this->container->__debug()) {
                $this->container->debug->error("No ha sido posible conectar al servidor de base de datos:" . $this->descriptor->connect_error);
            } else {
                trigger_error("No ha sido posible conectar al servidor de base de datos:" . $this->descriptor->connect_error, E_USER_ERROR);
            }
            return false;
        }
        if (!$this->descriptor->set_charset("utf8")) {
            printf("Error cargando el conjunto de caracteres utf8: %s\n", $this->descriptor->error);
            return false;
        }
        return true;
    }

    /**
     * Function that interacts with database and make queries
     * 
     * @param string $query String to be queried to database
     * @return integer|boolean Returns inserted id (ID) generated by the query, 0 if the query does not generate any new registry or false if it fails.
     */
    protected function bd($query) {
        $this->result = $this->descriptor->query($query);
        if ($this->result === false) {
            if ($this->container->__debug()) {
                $this->container->debug->error($this->descriptor->error . " [-->] " . $query);
            } else {
                trigger_error($this->descriptor->error . " [-->] " . $query, E_USER_ERROR);
            }
            return false;
        }
        return $this->descriptor->insert_id;
    }

    /**
     * Function that process result from database query and generate clean array with count of elements
     * 
     * @param boolean $sum Define if the number of elements will be counted and a variable 'num_elements' be created with the result. For backward compatibility, the variable may be named as 'numero'
     * @return array|boolean Clean array of elements or false if failed.
     */
    protected function bd_format($sum = false) {
        if ($this->result === true) {
            $formated[] = true;
        } elseif ($this->result !== false) {
            while ($aux = $this->result->fetch_assoc()) {
                $keys = array_keys($aux);
                $formated[] = $aux;
            }
        }

        if (isset($formated)) {
            if ($sum) {
                $formated['numero'] = count($formated);
                $formated['num_elements'] = $formated['numero'];
            }
            return $formated;
        } else {
            return false;
        }
    }

    /**
     * Function that logs database operations in log table from target database
     * 
     * @param string $tabla Name of table affected by query
     * @param string $id Name of id affected by query
     * @param string $accion Name of action executed by the query
     * @param string $log Log message that defines the operation
     * @return integer|boolean Returns inserted id (ID) generated by the query, 0 if the query does not generate any new registry or false if it fails.
     */
    public function log($table_name, $id, $action, $log) {
        $uid = (isset($_SESSION['uid'])) ? $_SESSION['uid'] : "0";
        $query = "INSERT INTO log (`users_id`, `table`, `id`, `action`, `log`, `date`) VALUES ('$uid','$table_name','$id','$action','$log',NOW())";
        return $this->bd($query);
    }

    /**
     * Same function as 'select', maintained only for backward compatibility purposes.
     * 
     * @return array|boolean Returns the array of SELECTED elements or false if fails
     */
    public function consultar($table, $where = "", $order = "", $sum = true, $log = false, $cache = null) {
        return $this->select($table, $where, $order, $sum, $log, $cache);
    }

    /**
     * Function that generates a SELECT query
     * 
     * @param string $table Queried table name
     * @param string $where Where condition of query
     * @param string $order Order condition of query
     * @param boolean $sum If the number of elements (num_elements) variable is returned
     * @param boolean $log If the query will be loged
     * @return array|boolean Returns the array of SELECTED elements or false if fails
     */
    public function select($table, $where = "", $order = "", $sum = true, $log = false, $cache = null) {
        $aux = explode(" ", $table);
        $query = (in_array("SELECT", $aux)) ? "$table " : "SELECT * FROM $table ";
        $query .= ($where != "") ? " WHERE $where " : "";

        if ($order != "") {
            $aux = explode(" ", $order);
            $query .= (in_array("GROUP", $aux)) ? $order : " ORDER BY $order ";
        }

        if (is_null($cache)) {
            $cache = $this->cache_queries;
        }

        if ($cache === true) {
            $cache_dir = (isset($_SESSION['uid'])) ? CACHE_PATH . 'Q' . DIRECTORY_SEPARATOR . md5(DOMAIN) . DIRECTORY_SEPARATOR . $_SESSION['uid'] . DIRECTORY_SEPARATOR . $this->dbhash : CACHE_PATH . 'Q' . DIRECTORY_SEPARATOR . '-' . DIRECTORY_SEPARATOR . $this->dbhash;
            if (!is_dir($cache_dir)) {
                @mkdir($cache_dir, 0775, true);
                if (!is_dir($cache_dir)) {
                    if (!headers_sent()) {
                        $this->container->__warn('No ha sido posible crear el directorio de cache de base de datos (Q). Posiblemente falten permisos.');
                    }
                    return false;
                }
            }
            $query_hash = md5($query);
            $cache_file = $cache_dir . DIRECTORY_SEPARATOR . $query_hash;
        }

        if ($cache === true && $this->container->cache->cache_status($cache_file, 86400) !== false) {
            $this->container->__info('Cache in use: Q, ' . substr($table, 0, 5)); //$query
            return $this->container->cache->read($cache_file);
        } else {
            if ($this->bd($query) !== false) {
                $result = $this->bd_format($sum);
                if ($log) {
                    $this->log($table, 0, "Consultar", "- Definir patron de registro log -");
                }
                if ($cache === true && count($result) >= 1 && $this->container->cache->write($cache_file, $result) === false) {
                    $this->container->__error('No ha sido posible generar la cache de la consulta. File: ' . $cache_file . ', Query: ' . $query);
                }
                return $result;
            } else {
                return false;
            }
        }
    }

    /**
     * Function that executes a query completely defined by the user
     * 
     * @param string $query Query to be executed
     * @param string $sum If the number of elements (num_elements) key is returned in the array
     * @return array|boolean Returns the array of elements obtained with the query or false if fails
     */
    public function free_query($query, $sum = true) {
        if (php_sapi_name() != 'cli') {
            $this->container->__info("Free query en ejecución: $query");
        }
        $queries = explode(';', $query);
        if (substr($query, -1) == ';') {
            array_pop($queries);
        }

        if (count($queries) > 1) {
            foreach ($queries as $query) {
                if ($this->bd($query) === false) {
                    $this->container->__error("Subquery of Free query failed: $query");
                }
            }
            if ($this->result !== false) {
                return $this->bd_format($sum);
            }
        } else {
            if ($this->bd($query) !== false) {
                if (is_null($sum)) {
                    return true;
                } else {
                    return $this->bd_format($sum);
                }
            } else {
                return false;
            }
        }
    }

    /**
     * Same function as 'insert', maintained only for backward compatibility purposes.
     * 
     * @return integer|boolean ID of generated row in table (autoincrement column) or false if failed
     */
    public function insertar($table, $fields, $values) {
        return $this->insert($table, $fields, $values);
    }

    /**
     * Function that executes a INSERT query
     * 
     * @param string $table Queried table name
     * @param array $fields Fields from table to insert
     * @param array $values Values that will be inserted
     * @return integer|boolean ID of generated row in table (autoincrement column) or false if failed
     */
    public function insert($table, $fields, $values) {
        $query = "INSERT INTO $table (`";
        $query .= implode("`, `", $fields);
        $query .= "`) VALUES ('";
        $query .= implode("', '", $values);
        $query .= "')";
        $query = str_replace("'NOW()'", "NOW()", $query);
        $query = str_replace("'NULL'", "NULL", $query);

        return $this->bd($query);
    }

    /**
     * Same function as 'update', maintained only for backward compatibility purposes.
     * 
     * @return boolean Returns true if success or false if fails
     */
    public function editar($table, $values, $id, $where = "", $preselect = 1) {
        return $this->update($table, $values, $id, $where, $preselect);
    }

    /**
     * Function that executes a UPDATE query
     * 
     * @param string $table Queried table name
     * @param array $values Values that will be updated
     * @param integer $id Field ID to locate row that will be updated
     * @param string $where Where condition of query
     * @param boolean $preselect If will be saved the information before update the row and appended to the log
     * @return boolean Returns true if success or false if fails
     */
    public function update($table, $values, $id, $where = "", $preselect = true) {
        if ($preselect) {
            $query = "SELECT * FROM $table WHERE " . $table . "_id = '$id' LIMIT 1";
            if ($this->bd($query) !== false) {
                $data = $this->bd_format();
            } else {
                $data = 'Data not found';
            }
        }

        $query = "UPDATE $table SET ";
        $query .= implode(", ", $values);
        if ($where != "") {
            $query .= " WHERE $where";
        } else {
            $query .= " WHERE " . $table . "_id = '$id'";
        }
        $query = str_replace("'NOW()'", "NOW()", $query);
        if ($this->bd($query) === false) {
            return false;
        } else {
            if ($preselect == 1) {
                $log = "Valor previo [" . implode(", ", $data[0]) . "]";
            } else {
                $log = "Editado elemento";
            }
            $this->log($table, $id, "editar", $log);
            return true;
        }
    }

    /**
     * Same function as 'delete', maintained only for backward compatibility purposes.
     */
    public function borrar($table, $id, $skip_log = false) {
        return $this->delete($table, $id, $skip_log = false);
    }

    /**
     * Function that executes a DELETE query
     * 
     * @param string $table Queried table name
     * @param integer $id Field ID to locate row that will be updated
     * @param boolean $skip_log If the current data will be saved before delete it
     * @return integer|boolean  Returns 0 if succeeded or false if it fails
     */
    public function delete($table, $id, $skip_log = false) {
        if ($skip_log == false) {
            $query = "SELECT * FROM $table WHERE " . $table . "_id = '$id' LIMIT 1";
            $this->bd($query);
            $data = $this->bd_format();

            $this->log($table, $id, "borrar", "Valor previo [" . $this->descriptor->real_escape_string(implode(", ", $data[0])) . "]");
        }

        $query = "DELETE FROM $table WHERE " . $table . "_id = '$id'";
        return $this->bd($query);
    }

    /**
     * Escapes a given string taking into account the current charset of the connection 
     * 
     * @param string $string String to be escaped
     * @return string An escaped string
     */
    public function escape_string($string) {
        return $this->descriptor->real_escape_string($string);
    }

    /**
     * Function that extract information about columns from given table
     * 
     * @param string $table Queried table name
     * @param boolean $log If the operation will be loged
     * @return array|boolean Returns an array with table fields or false if it fails
     */
    public function get_columns_info($table, $log = false) {
        if ($this->bd("SHOW FULL COLUMNS FROM $table") !== false) {
            if ($log) {
                $this->log($table, 0, "Consultar", "- Definir patron de registro log -");
            }
            return $this->bd_format(false);
        } else {
            return false;
        }
    }

    /**
     * Function that HTML code for input label. If LANG_IN_USE constant is defined and its equivalent to true, method gt (getText) is used.
     * 
     * @param string $name Input's name attribute
     * @param string $label String to be showed in the label
     * @return string HTML code generated.
     */
    public function field_label($name, $label = false, $config = false) {
        if ($label === false) {
            $format_name = str_replace("_", " ", $name);
            $format_name = ucfirst($format_name);
            if (substr($format_name, -3, 3) == " id") {
                $format_name = substr($format_name, 0, (strlen($format_name) - 3));
            }
        } else {
            $format_name = $label;
        }

        $html = '<label for="' . $name . '">';
        if (defined(LANG_IN_USE) && LANG_IN_USE !== false) {
            $html .= $this->container->lang->gt($format_name);
        } else {
            $html .= $format_name;
        }

        if (isset($config['help_tip']) && strlen($config['help_tip']) >= 1) {
            if (method_exists($this->container->funcs, 'help_tip')) {
                $html .= $this->container->funcs->help_tip($config['help_tip']);
            } else {
                $this->container->__warn('El campo requiere un "help tip" pero la librería no tiene definido el método.');
            }
        }
        $html .= '</label>';

        return $html;
    }

    /**
     * Function that creates HTML code of input field for represent a varchar value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param integer $size Number of max characters allowed in the field
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     * @return string HTML code generated.
     */
    public function varchar_field($name, $label, $size = 255, $value = "", $config = false) {
        $html = '<div class="form-group">';
        $html .= $this->field_label($name, (isset($config['label'])) ? $config['label'] : $label, $config);
        $html .= '<input type="' . ((isset($config['input_type'])) ? $config['input_type'] : 'text') . '" name="' . $name . '" id="' . $name . '" maxlength="' . ((isset($config['size'])) ? $config['size'] : $size) . '" ' . ((isset($config['class'])) ? 'class="' . $config['class'] . '"' : "") . ' value="' . $value . '" placeholder="' . ((isset($config['placeholder'])) ? $this->container->lang->gt($config['placeholder']) : '') . '" ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . ' />';
        $html .= '</div>';

        if (isset($config['linked_field'])) {
            $html .= '<script type="text/javascript">$(document).on(\'change\',\'#' . $config['linked_field'] . '\',function(){var v = $(this).val();$(\'#' . $name . '\').val(v).prop(\'disable\',true);});</script>';
        }

        return $html;
    }

    /**
     * Function that creates HTML code of input field for represent a integer value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param integer $size Number of max characters allowed in the field
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     * @return string HTML code generated.
     */
    public function int_field($name, $label, $size, $value = "", $config = false) {
        $html = '<div class="form-group">';
        $html .= $this->field_label($name, (isset($config['label'])) ? $config['label'] : $label, $config);
        $html .= '<input type="number" name="' . $name . '" id="' . $name . '" maxlength="' . ((isset($config['size'])) ? $config['size'] : $size) . '" ' . ((isset($config['class'])) ? 'class="' . $config['class'] . '"' : "") . ' value="' . $value . '" placeholder="' . ((isset($config['placeholder'])) ? $config['placeholder'] : '') . '" ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . ' />';
        $html .= '</div>';

        return $html;
    }

    /**
     * Function that creates HTML code of input field for represent a double value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param integer $size Number of max characters allowed in the field
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     * @return string HTML code generated.
     */
    public function double_field($name, $label, $size, $value = "", $config = false) {
        $html = '<div class="form-group">';
        $html .= $this->field_label($name, (isset($config['label'])) ? $config['label'] : $label, $config);
        $html .= '<input type="number" name="' . $name . '" id="' . $name . '" maxlength="' . ((isset($config['size'])) ? $config['size'] : $size) . '" ' . ((isset($config['class'])) ? 'class="' . $config['class'] . '"' : "") . ' value="' . $value . '" placeholder="' . ((isset($config['placeholder'])) ? $config['placeholder'] : '') . '" ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . ' />';
        $html .= '</div>';

        return $html;
    }

    /**
     * Function that creates HTML code of input field for represent a date value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     * @return string HTML code generated.
     */
    public function date_field($name, $label, $value = "", $config = false) {
        $html = '<div class="form-group">';
        $html .= $this->field_label($name, (isset($config['label'])) ? $config['label'] : $label, $config);
        $html .= '<input type="date" class="datepicker ' . ((isset($config['class'])) ? $config['class'] : "") . '" name="' . $name . '" id="' . $name . '" value="' . $value . '" placeholder="' . ((isset($config['placeholder'])) ? $config['placeholder'] : '') . '" ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . ' />';
        $html .= '</div>';

        return $html;
    }

    /**
     * Function that creates HTML code of input field for represent a datetime value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     * @return string HTML code generated.
     */
    public function datetime_field($name, $label, $value = "", $config = false) {
        $html = '<div class="form-group">';
        $html .= $this->field_label($name, (isset($config['label'])) ? $config['label'] : $label, $config);
        $html .= '<input type="datetime-local" class="datetimepicker ' . ((isset($config['class'])) ? $config['class'] : "") . '" name="' . $name . '" id="' . $name . '" value="' . $value . '" placeholder="' . ((isset($config['placeholder'])) ? $config['placeholder'] : '') . '" ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . ' />';
        $html .= '</div>';

        return $html;
    }

    /**
     * Function that creates HTML code of input field for represent a time value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     * @return string HTML code generated.
     */
    public function time_field($name, $label, $value = "", $config = false) {
        $html = '<div class="form-group">';
        $html .= $this->field_label($name, (isset($config['label'])) ? $config['label'] : $label, $config);
        $html .= '<input type="time" class="timepicker ' . ((isset($config['class'])) ? $config['class'] : "") . '" name="' . $name . '" id="' . $name . '" value="' . $value . '" placeholder="' . ((isset($config['placeholder'])) ? $config['placeholder'] : '') . '" ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . ' />';
        $html .= '</div>';

        return $html;
    }

    /**
     * Function that creates HTML code of input field for represent a id field (relative to self table or foreign key)
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $values Default value to show in the field
     * @param integer $size Number of max characters allowed in the field
     * @param array $config Array of config parametters relative to the field 
     * @return string HTML code generated.
     */
    public function id_field($name, $label, $values, $size = "1", $config = false) {
        $html = '<div class="form-group">';
        $html .= $this->field_label($name, (isset($config['label'])) ? $config['label'] : $label, $config);
        if (!isset($values) || count($values) <= 0) {
            $html .= '<select name="' . $name . '" id="' . $name . '" disabled="disabled" size="' . ((isset($config['size'])) ? $config['size'] : $size) . '" ' . ((isset($config['class'])) ? 'class="' . $config['class'] . '"' : "") . ' >';
            $html .= '<option value="0">Sin datos, deben crearse antes de este paso.</option>';
            $html .= '</select>';
        } else {
            if (isset($config['linked_field'])) {
                $html .= '<select name="' . $name . '" id="' . $name . '" size="' . ((isset($config['size'])) ? $config['size'] : $size) . '" ' . ((isset($config['class'])) ? 'class="' . $config['class'] . '"' : "") . ' data-linked-field="' . $config['linked_field'] . '"' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . '>';
            } else {
                $html .= '<select name="' . $name . '" id="' . $name . '" size="' . ((isset($config['size'])) ? $config['size'] : $size) . '" ' . ((isset($config['class'])) ? 'class="' . $config['class'] . '"' : "") . '' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . '>';
            }

            //$html .= '<select name="'.$name.'" id="'.$name.'" size="'.((isset($config['size']))?$config['size']:$size).'" '.((isset($config['class']))?'class="'.$config['class'].'"':"").' >';
            foreach ($values as $value) {
                $html .= '<option value="' . $value[1] . '" ';
                if (isset($value['selected'])) {
                    $html .= 'selected="selected" ';
                }
                if (isset($config['linked_field'])) {
                    $html .= 'data-linked-value="' . $value['linked_value'] . '" ';
                }
                if (isset($value['linked_aux_value'])) {
                    $html .= 'data-linked-aux-value="' . $value['linked_aux_value'] . '" ';
                }
                $html .= '>' . $value[0] . '</option>';
            }
            $html .= '</select>';
        }

        if (isset($config['linked_field'])) {
            $html .= '<script type="text/javascript">$(document).on(\'change\',\'#' . $config['linked_field'] . '\',function(){var v = $(this).val();var im = 0;$(\'#' . $name . ' option[value="0"]\').prop(\'selected\',false).hide();$(\'#' . $name . '\').find(\'option\').each(function(i,el){ $(this).prop(\'selected\',false);if($(this).attr(\'data-linked-value\') === v){if(im === 0){$(this).prop(\'selected\',true);}$(this).show();im++;}else{$(this).hide();} }); if(im === 0){if($(\'#' . $name . ' option[value="0"]\').length === 1){$(\'#' . $name . ' option[value="0"]\').prop(\'selected\',true).show();}else{$(\'#' . $name . '\').append(\'<option value="0" selected="selected">No hay elementos que mostrar</option>\');}} });</script>';
        }

        $html .= '</div>';

        return $html;
    }

    /**
     * Function that creates HTML code of input field for represent a enum field
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $values Array of falues to show in the field. Ex.: array(array(Spain, SP, 'selected' => true),array(Europe, EU))
     * @param integer $size Number of max characters allowed in the field
     * @param array $config Array of config parametters relative to the field 
     * @return string HTML code generated.
     */
    public function enum_field($name, $label, $values, $size = "1", $config = false) {
        $html = '<div class="form-group">';
        $html .= $this->field_label($name, (isset($config['label'])) ? $config['label'] : $label, $config);

        if (isset($config['input_type']) && $config['input_type'] == "checkbox") {
            foreach ($values as $num => $value) {
                $html .= '<label class="checkbox-inline">
                        <input type="checkbox" name="' . $name . '" value="' . $value[1] . '" ' . ((isset($value['selected'])) ? 'checked="checked"' : '') . ' ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . '> ' . ((isset($config['value_labels']) && count($config['value_labels']) >= 1) ? $config['value_labels'][$num] : $value[0]) . '
                </label>';
            }
        } elseif (isset($config['input_type']) && $config['input_type'] == "radio") {
            foreach ($values as $num => $value) {
                $html .= '<label class="radio-inline">
                        <input type="radio" name="' . $name . '" value="' . $value[1] . '" ' . ((isset($value['selected'])) ? 'checked="checked"' : '') . ' ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . '> ' . ((isset($config['value_labels']) && count($config['value_labels']) >= 1) ? $config['value_labels'][$num] : $value[0]) . '
                </label>';
            }
        } else {
            //Linked_to
            if (isset($config['linked_field'])) {
                $html .= '<select name="' . $name . '" id="' . $name . '" size="' . ((isset($config['size'])) ? $config['size'] : $size) . '" ' . ((isset($config['class'])) ? 'class="' . $config['class'] . '"' : "") . ' data-linked-field="' . $config['linked_field'] . '" ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . '>';
            } else {
                $html .= '<select name="' . $name . '" id="' . $name . '" size="' . ((isset($config['size'])) ? $config['size'] : $size) . '" ' . ((isset($config['class'])) ? 'class="' . $config['class'] . '"' : "") . ' ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . '>';
            }

            foreach ($values as $num => $value) {
                if ($value[1] === 0) {
                    if (isset($config['value_labels']) && count($config['value_labels']) >= 1) {
                        array_unshift($config['value_labels'], 'Seleccione una opción');
                    }
                    if (isset($value['selected'])) {
                        $html .= '<option value="' . $value[1] . '" selected="selected">' . ((isset($config['value_labels']) && count($config['value_labels']) >= 1) ? $config['value_labels'][$num] : $value[0]) . '</option>';
                    } else {
                        $html .= '<option value="' . $value[1] . '">' . ((isset($config['value_labels']) && count($config['value_labels']) >= 1) ? $config['value_labels'][$num] : $value[0]) . '</option>';
                    }
                } elseif (isset($config['linked_field']) && isset($value['selected'])) {
                    $html .= '<option value="' . $value[1] . '" selected="selected" data-linked-value="' . $value['linked_value'] . '">' . ((isset($config['value_labels']) && count($config['value_labels']) >= 1) ? $config['value_labels'][$num] : $value[0]) . '</option>';
                } elseif (isset($value['selected'])) {
                    $html .= '<option value="' . $value[1] . '" selected="selected">' . ((isset($config['value_labels']) && count($config['value_labels']) >= 1) ? $config['value_labels'][$num] : $value[0]) . '</option>';
                } elseif (isset($config['linked_field'])) {
                    $html .= '<option value="' . $value[1] . '" data-linked-value="' . $value['linked_value'] . '">' . ((isset($config['value_labels']) && count($config['value_labels']) >= 1) ? $config['value_labels'][$num] : $value[0]) . '</option>';
                } else {
                    $html .= '<option value="' . $value[1] . '">' . ((isset($config['value_labels']) && count($config['value_labels']) >= 1) ? $config['value_labels'][$num] : $value[0]) . '</option>';
                }
            }
            $html .= '</select>';
        }

        if (isset($config['linked_field'])) {
            $html .= '<script type="text/javascript">$(document).on(\'change\',\'#' . $config['linked_field'] . '\',function(){var v = $(this).find(\'option:selected\').attr(\'data-linked-aux-value\');$(\'#' . $name . '\').find(\'option\').each(function(i,el){ $(this).prop(\'selected\',false);if($(this).attr(\'value\') === v){$(this).prop(\'selected\',true);} });});</script>';
        }

        $html .= '</div>';

        return $html;
    }

    /**
     * Function that creates HTML code of textarea that represent a text field
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     * @return string HTML code generated.
     */
    public function text_field($name, $label, $value = "", $config = false) {
        $html = '<div class="form-group">';
        $html .= $this->field_label($name, (isset($config['label'])) ? $config['label'] : $label, $config);
        $html .= '<textarea name="' . $name . '" id="' . $name . '" ' . ((isset($config['class'])) ? 'class="' . $config['class'] . '"' : "") . ' placeholder="' . ((isset($config['placeholder'])) ? $config['placeholder'] : '') . '" ' . ((isset($config['disabled'])) ? 'disabled="' . $config['disabled'] . '"' : '') . '>' . $value . '</textarea>';
        $html .= '</div>';

        return $html;
    }

    /**
     * Function that creates a hidden input field
     * 
     * @param string $name Name of the input field
     * @param string $value Default value to show in the field
     * @return string HTML code generated.
     */
    public function hidden_field($name, $value = "") {
        return '<input type="hidden" name="' . $name . '" id="' . $name . '" value="' . $value . '" />';
    }

    /**
     * Function that retrieves a field comment and convert to usable array
     * 
     * Avaliable configs:
     *  - label: custom labels
     *  - class: custom classes
     *  - default_value: value por defecto
     *  - disabled: disables an input field
     *  - external_table: nombre de la tabla externa
     *  - external_table=none: campo id que no correcponde a una tabla externa
     *  - external_field: nombre del campo externo para el label. Puede ser compuesto, siempre dentro del los datos devueltos en la misma línea de la tabla externa. Se pueden separar campos en labels compuestos con carácteres de longitud 1. (EJ: #+units_id+-+unit_name) 
     *  - external_field_order_subquery: subconsulta para ordenar los resultados en el select de los formularios de nuevo y editar
     *  - placeholder: valor para el placeholder
     *  - size: Max charater length of field  
     *  - value_labels: In case of ENUM field, labels of possible values (Ex. value_labels:one|two|three)
     *  - input_type: In case of ENUM field or VARCHAR, type of input to represent values (for ENUM checkbox, radio... default select, for VARCHAR password, text)
     *  - help_tip: Code to show a help tip, only visible in label
     *  - linked_field: El campo en base al cual se deben filtrar 'visualmente' los valores mostrados. Se filtran los valores de este campo en función del valor seleccionado en el campo del 'linked_field'.
     *  - column: nombre de la columna dentro de una tabla para visualizar los datos.
     *  - short_column: en el caso de una tabla de tamaño reducido, nombre de la columna dentro de una tabla para visualizar datos.
     *  - column_order: número de orden de la columna entre las columnas de una tabla para visualizar los datos.
     *  - cell_action: contenido del atributo 'data-action' de la celda.
     *  - form: if defined as 'no', the field will not be displayed in the add or edit forms.
     *  - th_class: class attribute for th element
     *  - value_format: format of the value in the form (wysiwyg, date, colour, etc...)
     *  - value_format_aux: auxiliar information for value_format
     *  - cell_template: code template for use in 'virtual' columns added by user. Replace vars (##status_id##) with row information.
     * 
     * @param string $field_comment Coment of field from database
     * @return array Array with configuration parameters from field
     */
    public static function field_config($field_comment) {
        if ($field_comment == "") {
            return null;
        }
        
        $tokens = explode(",", $field_comment);
        if (substr($field_comment, -1, 1) == ",") {
            array_pop($tokens);
        }
        if ($tokens) {
            foreach ($tokens as $token) {
                $conf = explode(":", $token);
                $field_config[$conf[0]] = (isset($conf[1])) ? $conf[1] : $conf[0];
            }
            
            if (isset($field_config['value_labels'])) {
                $field_config['value_labels'] = explode('|', $field_config['value_labels']);
                if (defined(LANG_IN_USE) && LANG_IN_USE !== false) {
                    foreach ($field_config['value_labels'] as $num => $label) {
                        $field_config['value_labels'][$num] = $this->container->lang->gt($label);
                    }
                }
            }
            
            if (isset($field_config['value_format']) && in_array($field_config['value_format'],['icons','color']) === true && isset($field_config['value_format_aux'])) {
                
                $icons = explode('|', $field_config['value_format_aux']);
                if($icons){
                    foreach($icons as $icon){
                        
                        $aux = explode('=',$icon);
                        if($aux){
                            $field_config['value_format_aux'][$aux[0]] = $aux[1];
                        }else{
                            $this->container->__warn('Error en la estructura del icono, información incompleta. ('.$icon.')');
                        }
                    }
                }
            }
        }

        return $field_config;
    }

    public function fieldConfigTypes() {
        $types = [
            'label' => ['description' => 'etiqueta label personalizada para los formularios'],
            'class' => ['description' => 'custom classes para los input de los formularios'],
            'default_value' => ['description' => 'value por defecto'],
            'disabled' => ['description' => 'disables an input field'],
            'external_table' => ['description' => 'nombre de la tabla externa. Si valor = \'none\' -> campo id que no correcponde a una tabla externa'],
            'external_field' => ['description' => 'nombre del campo externo para el label. Puede ser compuesto, siempre dentro del los datos devueltos en la misma línea de la tabla externa. Se pueden separar campos en labels compuestos con carácteres de longitud 1. (EJ: #+units_id+-+unit_name)'],
            'external_field_order_subquery' => ['description' => 'subconsulta para ordenar los resultados en el select de los formularios de nuevo y editar'],
            'placeholder' => ['description' => 'valor para el placeholder'],
            'size' => ['description' => 'Max charater length of field'],
            'value_labels' => ['description' => 'In case of ENUM field, labels of possible values (Ex. value_labels:one|two|three)'],
            'input_type' => ['description' => 'In case of ENUM field or VARCHAR, type of input to represent values (for ENUM checkbox, radio... default select, for VARCHAR password, text)'],
            'help_tip' => ['description' => 'Code to show a help tip, only visible in label'],
            'linked_field' => ['description' => 'El campo en base al cual se deben filtrar \'visualmente\' los valores mostrados. Se filtran los valores de este campo en función del valor seleccionado en el campo del \'linked_field\'.'],
            'column' => ['description' => 'nombre de la columna dentro de una tabla para visualizar los datos.'],
            'short_column' => ['description' => 'en el caso de una tabla de tamaño reducido, nombre de la columna dentro de una tabla para visualizar datos.'],
            'column_order' => ['description' => 'número de orden de la columna entre las columnas de una tabla para visualizar los datos.'],
            'cell_action' => ['description' => 'contenido del atributo \'data-action\' de la celda.'],
            'form' => ['description' => 'if defined as \'no\', the field will not be displayed in the add or edit forms.'],
            'th_class' => ['description' => 'class attribute for th element'],
            'value_format' => ['description' => 'format of the value in the form (wysiwyg, date, colour, etc...)'],
            'value_format_aux' => ['description' => 'auxiliar information for value_format'],
            'cell_template' => ['description' => 'code template for use in \'virtual\' columns added by user. Replace vars (##status_id##) with row information.']
        ];

        ksort($types);
        return $types;
    }
    
    /***
     * INCLOMPLETO - POR HACER EN EL FUTURO
     */
    public static function table_config($table_comment) {
        /*
SELECT * 
    FROM INFORMATION_SCHEMA.TABLES 
    WHERE table_schema='pdc.reptol' 
        AND table_name='maquinas';
         *          */
        
        if ($table_comment == "") {
            return null;
        }

        $tokens = explode(",", $table_comment);
        if (substr($table_comment, -1, 1) == ",") {
            array_pop($tokens);
        }
        if ($tokens) {
            foreach ($tokens as $token) {
                $conf = explode(":", $token);
                $table_comment[$conf[0]] = (isset($conf[1])) ? $conf[1] : $conf[0];
            }
            if (isset($table_comment['value_labels'])) {
                $table_comment['value_labels'] = explode('|', $table_comment['value_labels']);
                if (defined(LANG_IN_USE) && LANG_IN_USE !== false) {
                    foreach ($table_comment['value_labels'] as $num => $label) {
                        $table_comment['value_labels'][$num] = $this->container->lang->gt($label);
                    }
                }
            }
        }

        return $table_comment;
    }

    /**
     * Function that creates HTML code of fields to insert form from given table structure
     * 
     * @param string $table Target table name
     * @param array $exclude_fields Array of field names that will be omitted
     * @return string HTML code generated.
     */
    public function create_add_form_fields($table, $exclude_fields, $option_0 = false) {
        $html = '';
        $fields = $this->get_columns_info($table);
        foreach ($fields as $field) {
            $this->fields_config[$field['Field']] = self::field_config($field['Comment']);
        }
        foreach ($fields as $field) {
            if (isset($this->fields_config[$field['Field']]['form']) && $this->fields_config[$field['Field']]['form'] === 'no') {
                continue;
            }
            $name = $field['Field'];
            $auxname = $table . "_id";
            //$field_config = self::field_config($field['Comment']);
            $field_config = $this->fields_config[$name];

            if (in_array($name, $exclude_fields))
                continue;
            if ($name == $auxname) {
                continue;
            }
            if (substr($name, -3) === "_id" && (!isset($field_config['external_table']) || $field_config['external_table'] !== 'none')) {
                if (is_null($this->order)) {
                    $order_query = "";
                } else {
                    if (isset($field_config['external_field']) && ($this->order === 'ASC' || $this->order === 'DESC')) {
                        $order_query = $this->create_external_field_order_subquery($field_config);
                    } else {
                        $order_query = $this->order;
                    }
                }

                if (isset($field_config['external_table'])) {
                    $external_table = $field_config['external_table'];
                    $external_rows = $this->consultar($external_table, "", $order_query, false, false);
                    $field_name = $field_config['external_table'] . "_id";
                } else {
                    $external_table = substr($name, 0, strlen($name) - 3);
                    $external_rows = $this->consultar($external_table, "", $order_query, false, false);
                    $field_name = $name;
                }

                if ($option_0) {
                    $values = array(array('Seleccione una opción', 0, 'linked_value' => 0));
                } else {
                    $values = array();
                }

                if (!isset($external_rows[0])) {
                    $this->container->__warn("No es posible crear los valores del campo SELECT: no se han recuperado datos de la tabla externa (" . substr($name, 0, strlen($name) - 3) . ") [" . __FUNCTION__ . "," . __LINE__ . "]");
                } else {
                    foreach ($external_rows as $row_aux) {
                        $row_aux_keys = array_keys($row_aux);
                        if (isset($field_config['external_field'])) {
                            if (strpos($field_config['external_field'], '+')) {
                                //$field_label = $this->create_external_field_label($field_config, $row_aux);
                                $field_label = $this->format_external_field_label($table, $name, $row_aux);
                            } else {
                                $field_label = $row_aux[$field_config['external_field']];
                            }
                        } else {
                            $field_label = $row_aux[$row_aux_keys[1]];
                        }

                        $opt = array($field_label, $row_aux[$field_name]);
                        if (isset($row_aux[$name]) && $row_aux[$name] === $field['Default']) {
                            $opt['selected'] = true;
                        } elseif (isset($field_config['default_value']) && $row_aux[$name] == $field_config['default_value']) {
                            $opt['selected'] = true;
                        }

                        foreach ($this->fields_config as $aux_name => $aux_conf) {
                            if (isset($aux_conf['linked_field']) && $aux_conf['linked_field'] == $name && isset($row_aux[$aux_name])) {
                                $opt['linked_aux_value'] = $row_aux[$aux_name];
                            }
                        }

                        if (isset($field_config['linked_field'])) {
                            $opt['linked_field'] = $field_config['linked_field'];
                            $opt['linked_value'] = $row_aux[$field_config['linked_field']];
                        }
                        $values[] = $opt;
                        unset($opt);
                    }
                }
                $html .= $this->id_field($name, false, $values, "1", $field_config);
                unset($row_aux, $values);
                continue;
            }

            if ($option_0 === false) {
                $value = (isset($field_config['default_value'])) ? $field_config['default_value'] : $field['Default'];
            } else {
                $value = '';
            }

            $type = explode("(", $field['Type']);
            if (count($type) >> 1) {
                $size = explode(")", $type[1]);
                $size = $size[0];
            }
            switch ($type[0]) {
                case "varchar":$html .= $this->varchar_field($name, false, $size, $value, $field_config);
                    break;
                case "int":$html .= $this->int_field($name, false, $size, $value, $field_config);
                    break;
                case "double":$html .= $this->double_field($name, false, $size, $value, $field_config);
                    break;
                case "date":$html .= $this->date_field($name, false, $value, $field_config);
                    break;
                case "datetime":$html .= $this->datetime_field($name, false, $value, $field_config);
                    break;
                case "time":$html .= $this->time_field($name, false, $value, $field_config);
                    break;
                case "text":$html .= $this->text_field($name, false, $value, $field_config);
                    break;
                case "enum":
                    $values = $size;
                    $tokens = explode(",", $values);

                    if ($option_0 && !isset($field_config['input_type'])) {
                        $values = array(array('Seleccione una opción', 0, 'linked_value' => 0));
                    } else {
                        $values = array();
                    }
                    foreach ($tokens as $token) {
                        $opt = array(substr($token, 1, -1), substr($token, 1, -1));
                        if (substr($token, 1, -1) === $field['Default'] && (!$option_0 || isset($field_config['input_type']))) {
                            $opt['selected'] = true;
                        }
                        if (isset($field_config['linked_field'])) {
                            $opt['linked_field'] = $field_config['linked_field'];
                            $opt['linked_value'] = substr($token, 1, -1);
                        }
                        $values[] = $opt;
                        unset($opt);
                    }

                    $html .= $this->enum_field($name, false, $values, "1", $field_config);
                    break;
                default: $this->container->__error("Imposible crear campo del formulario: el tipo de campo no ha sido reconocido ($type[0]) [" . __METHOD__ . "," . __LINE__ . "]");
                    break;
            }
        }
        $html .= $this->hidden_field("t", $table);

        return $html;
    }

    private function create_external_field_order_subquery($external_field_config) {
        if(isset($external_field_config['external_field_order_subquery'])){
            return $external_field_config['external_field_order_subquery'];
        }
        if (strpos($external_field_config['external_field'], '+')) {
            $order_query = '';
            $tokens = explode('+', $external_field_config['external_field']);
            foreach ($tokens as $token) {
                if (strlen($token) === 1) {
                    continue;
                } else {
                    $order_query .= $token . ' ' . (($this->order === 'ASC' || $this->order === 'DESC') ? $this->order : '') . ',';
                }
            }
            $order_query = substr($order_query, 0, -1);
        } elseif (isset($external_field_config['external_field'])) {
            $order_query = $external_field_config['external_field'] . ' ' . (($this->order === 'ASC' || $this->order === 'DESC') ? $this->order : '');
        } else {
            $order_query = $external_field_config['external_field'] . ' ' . (($this->order === 'ASC' || $this->order === 'DESC') ? $this->order : '');
        }
        return $order_query;
    }

    private function create_external_field_label($external_field_config, $row_data) {
        $field_label = '';
        $tokens = explode('+', $external_field_config['external_field']);
        foreach ($tokens as $token) {
            if (strlen($token) === 1) {
                $field_label .= $token . ' ';
            } else {
                if (substr($token, -3) === "_id") {
                    $fields = $this->get_columns_info($external_field_config['external_table']);
                    foreach ($fields as $field) {
                        if ($field['Field'] === $token) {
                            $field_config = self::field_config($field['Comment']);
                        }
                    }

                    if (isset($field_config['external_table'])) {
                        $ext_table = $field_config['external_table'];
                    } else {
                        $ext_table = substr($token, 0, -3);
                    }

                    $token_info = $this->select($ext_table, "$token = '$row_data[$token]'");
                    if ($token_info) {
                        if ($field_config !== true) {
                            $field_label .= $this->create_external_field_label($field_config, $token_info[0]);
                        } else {
                            $field_label .= $token_info[0][$token] . ' ';
                        }
                    } else {
                        $this->container->__warn('No ha sido posible recuperar la información del campo externo de segundo nivel. external_table: ' . $ext_table . ' external_field: ' . $token);
                        $field_label .= '#' . $row_data[$token] . ' -No encontrado- ';
                    }
                } else {
                    $field_label .= $row_data[$token] . ' ';
                }
            }
        }
        return substr($field_label, 0, -1);
    }

    /**
     * Function that creates HTML code of fields from given table structure
     * 
     * @param string $table Target table name
     * @param integer $id Target row ID to locate in database
     * @param array $exclude_fields Array of field names that will be omitted
     * @return string HTML code generated.
     */
    public function create_edit_form_fields($table, $id, $exclude_fields, $option_0 = false) {
        $html = '';
        $tmp = $this->consultar($table);
        if (isset($tmp[0][$table . "_id"])) {
            $edit_data = $this->consultar($table, $table . "_id = '$id'");
        } else {
            $edit_data = array($tmp[$id]);
        }

        $fields = $this->get_columns_info($table);
        foreach ($fields as $field) {
            $this->fields_config[$field['Field']] = self::field_config($field['Comment']);
        }
        foreach ($fields as $field) {
            if (isset($this->fields_config[$field['Field']]['form']) && $this->fields_config[$field['Field']]['form'] === 'no') {
                continue;
            }
            $name = $field['Field'];
            $auxname = $table . "_id";
            //$field_config = self::field_config($field['Comment']);
            $field_config = $this->fields_config[$name];

            if (in_array($name, $exclude_fields))
                continue;
            if ($name == $auxname) {
                continue;
            }
            if (strpos($name, "_id") && $field_config['external_table'] !== 'none') {
                if (isset($field_config['external_table'])) {
                    $aux_table = $field_config['external_table'];
                    $field_name = $field_config['external_table'] . "_id";
                } else {
                    $aux_table = substr($name, 0, -3);
                    $field_name = $name;
                }

                if (is_null($this->order)) {
                    $order_query = "";
                } else {
                    if (isset($field_config['external_field']) && ($this->order === 'ASC' || $this->order === 'DESC')) {
                        $order_query = $this->create_external_field_order_subquery($field_config);
                    } else {
                        $order_query = $name . ' ' . $this->order;
                    }
                }
                $result_aux = $this->consultar($aux_table, "", $order_query, false, false);

                $values = [];
                if ($result_aux)
                    foreach ($result_aux as $row_aux) {
                        $keys = array_keys($row_aux);
                        if (isset($field_config['external_field'])) {
                            if (strpos($field_config['external_field'], '+')) {
                                //$field_label = $this->create_external_field_label($field_config, $row_aux);
                                $field_label = $this->format_external_field_label($table, $name, $row_aux);
                            } else {
                                $field_label = $row_aux[$field_config['external_field']];
                            }
                        } else {
                            $field_label = $row_aux[$keys[1]];
                        }

                        /* if($row_aux[$field_name] == $edit_data[0][$name]){
                          $values[] = array($field_label,$row_aux[$field_name],"selected" => true);
                          }else{
                          $values[] = array($field_label,$row_aux[$field_name]);
                          }
                          unset($keys); */

                        $opt = array($field_label, $row_aux[$field_name]);
                        if ($row_aux[$field_name] == $edit_data[0][$name]) {
                            $opt['selected'] = true;
                        }

                        foreach ($this->fields_config as $aux_name => $aux_conf) {
                            if (isset($aux_conf['linked_field']) && $aux_conf['linked_field'] == $name && isset($row_aux[$aux_name])) {
                                $opt['linked_aux_value'] = $row_aux[$aux_name];
                            }
                        }

                        if (isset($field_config['linked_field'])) {
                            $opt['linked_field'] = $field_config['linked_field'];
                            $opt['linked_value'] = $row_aux[$field_config['linked_field']];
                        }
                        $values[] = $opt;
                        unset($opt);
                    }

                $html .= $this->id_field($name, false, $values, "1", $field_config);
                unset($row_aux, $values);
                continue;
            }

            $type = explode("(", $field['Type']);
            if (count($type) >> 1) {
                $size = explode(")", $type[1]);
                $size = $size[0];
            }
            switch ($type[0]) {
                case "varchar":$html .= $this->varchar_field($name, false, $size, $edit_data[0][$name], $field_config);
                    break;
                case "int":$html .= $this->int_field($name, false, $size, $edit_data[0][$name], $field_config);
                    break;
                case "double":$html .= $this->double_field($name, false, $size, $edit_data[0][$name], $field_config);
                    break;
                case "datetime":$html .= $this->datetime_field($name, false, $edit_data[0][$name], $field_config);
                    break;
                case "date":$html .= $this->date_field($name, false, $edit_data[0][$name], $field_config);
                    break;
                case "time":$html .= $this->time_field($name, false, $edit_data[0][$name], $field_config);
                    break;
                case "text":$html .= $this->text_field($name, false, $edit_data[0][$name], $field_config);
                    break;
                case "enum":
                    $values = $size;
                    $tokens = explode(",", $values);

                    if ($option_0) {
                        $values = array(array('Seleccione una opción', 0, 'linked_value' => 0));
                    } else {
                        $values = array();
                    }

                    foreach ($tokens as $token) {
                        $opt = array(substr($token, 1, -1), substr($token, 1, -1));

                        if (substr($token, 1, -1) == $edit_data[0][$name]) {
                            $opt['selected'] = true;
                        }

                        if (isset($field_config['linked_field'])) {
                            $opt['linked_field'] = $field_config['linked_field'];
                            $opt['linked_value'] = substr($token, 1, -1);
                        }
                        $values[] = $opt;
                        unset($opt);
                    }
                    $html .= $this->enum_field($name, false, $values, "1", $field_config);
                    break;
                default: $this->container->__error("Imposible crear campo del formulario: el tipo de campo no ha sido reconocido ($type[0]) [" . __METHOD__ . "," . __LINE__ . "]");
                    break;
            }
            unset($name, $aux_table, $result_aux, $values);
        }
        $html .= $this->hidden_field("id", $id);
        $html .= $this->hidden_field("t", $table);

        return $html;
    }

    /**
     * Function that creates a insert form from database table
     * 
     * @param string $table Target table name
     * @param string $url Action url where form data will be submitted
     * @param array $exclude_fields Array of field names that will be omitted
     * @param string $id Id attribute of final form
     * @return string HTML code generated
     */
    public function create_add_form($table, $url = "", $exclude_fields = array(), $id = "", $option_0 = false) {
        $html = '<form class="add_form clearfix" ' . ((strlen($id) > 0) ? 'id="' . $id . '"' : '') . ' method="post" lang="es" enctype="multipart/form-data" action="' . $url . '">';
        if ($option_0) {
            $html .= $this->create_add_form_fields($table, $exclude_fields, true);
        } else {
            $html .= $this->create_add_form_fields($table, $exclude_fields);
        }
        
        if(substr($id, -9,9) !== 'undefined'){
            $html .= '<input type="hidden" name="ic" value="'.substr($id,strpos($id, '-')+1).'" />';
        }
        
        $html .= '<div id="modal_actions">';
        $html .= '<input type="submit" class="btn btn-success" value="Guardar datos" name="create" />';
        $html .= '</div>';
        $html .= '</form>';

        return $html;
    }

    /**
     * Function that creates a insert form from database table
     * 
     * @param string $table Target table name
     * @param string $id Id of table row that will be updated
     * @param string $url Action url where form data will be submitted
     * @param array $exclude_fields Array of field names that will be omitted
     * @param string $idA Id attribute of final form
     * @return string HTML code generated
     */
    public function create_edit_form($table, $id, $url = "", $exclude_fields = array(), $idA = "", $option_0 = false) {
        $html = '<form class="edit_form clearfix" ' . ((strlen($idA) > 0) ? 'id="' . $idA . '"' : '') . ' method="post" lang="es" enctype="multipart/form-data" action="' . $url . '">';
        if ($option_0) {
            $html .= $this->create_edit_form_fields($table, $id, $exclude_fields, true);
        } else {
            $html .= $this->create_edit_form_fields($table, $id, $exclude_fields);
        }

        if(substr($idA, -9,9) !== 'undefined'){
            $html .= '<input type="hidden" name="ic" value="'.substr($idA,strpos($idA, '-')+1).'" />';
        }
        
        $html .= '<div id="modal_actions">';
        $html .= '<input type="submit" class="btn btn-warning" value="Modificar datos" name="update" />';
        $html .= '<input type="button" class="btn btn-danger del_warning" value="Borrar datos" name="delete" data-d="' . $this->container->funcs->encode(array('t' => $table, 'i' => $id)) . '" />';
        $html .= '</div>';
        $html .= '</form>';

        return $html;
    }

    /**
     * Function that creates a HTML table from database table structure to show his data
     * 
     * @param string $table Target table name
     * @param string $table_id_field Name of the table field that will be used to represent the field ID from another table
     * @param array $columns Array of columns to show and his names that will be displayed
     * @return string HTML code of table
     */
    public function create_table_rows($table, $table_id_field = null, $columns) {
        $html = "";
        $filter = '';

        $this->get_table_config($table);

        if (isset($_SESSION[$table])) {
            foreach ($_SESSION[$table] as $name => $value) {
                if (is_null($value))
                    continue;
                if (substr($name, -3) === '_id') {
                    $filter .= " AND $name = '$value'";
                } else {
                    $filter .= " AND $name LIKE '%" . $value . "%'";
                }
            }
        }

        if (is_null($this->order_by) && !is_null($table_id_field)) {
            $order_query = "$table_id_field " . $this->order;
        } elseif (is_null($this->order_by)) {
            reset($this->tables_config[$table]);
            $order_query = key($this->tables_config[$table]) . " " . $this->order;
        } else {
            $order_query = $this->order_by . ' ' . $this->order;
        }

        if ($table_id_field !== null) {
            $rows = $this->consultar($table, "1=1 $filter", $order_query . " LIMIT 1000", false, false);
        } else {
            $rows = $this->consultar($table, "1=1 $filter", $order_query, false, false);
        }
        $aux_col_info = $this->get_columns_info($table);
        if ($rows) {
            foreach ($rows as $num => $row) {
                if ($table_id_field !== null) {
                    $i = $row[$table_id_field];
                } else {
                    $i = $num;
                }
                $html .= "\n<tr ref=\"" . $i . "\" data-d=\"" . $this->container->funcs->encode(array('t' => $table, 'i' => $i)) . "\">";
                foreach ($columns as $column) {
                    $column_info = explode(":", $column);

                    foreach ($aux_col_info as $field) {
                        if ($field['Field'] == $column_info[1]) {
                            $field_config = $this->field_config($field['Comment']);
                            $action = (isset($field_config['cell_action'])) ? 'data-action="' . $field_config['cell_action'] . '"' : '';
                            break;
                        }
                    }
                    if (substr($column_info[1], -3) === "_id") {
                        if (isset($field_config['external_table'])) {
                            $aux_table = $field_config['external_table'];
                            $aux_id_field = $field_config['external_table'] . "_id";
                        } else {
                            $aux_table = substr($column_info[1], 0, -3);
                            $aux_id_field = $column_info[1];
                        }

                        $aux = $this->consultar($aux_table, "$aux_id_field = '" . $row[$column_info[1]] . "'");
                        if ($aux) {
                            if (isset($field_config['external_field'])) {
                                if (strpos($field_config['external_field'], '+')) {
                                    $field_label = '';
                                    $tokens = explode('+', $field_config['external_field']);
                                    foreach ($tokens as $token) {
                                        if (strlen($token) === 1) {
                                            $field_label .= $token . ' ';
                                        } else {
                                            $field_label .= $aux[0][$token] . ' ';
                                        }
                                    }
                                    $field_label = substr($field_label, 0, -1);
                                    $html .= "<td $action>" . $field_label . "</td>";
                                } else {
                                    $html .= "<td $action>" . $aux[0][$field_config['external_field']] . "</td>";
                                }
                            } else {
                                if (isset($aux[0][1])) {
                                    $html .= "<td $action>" . $aux[0][1] . "</td>";
                                } else {
                                    $html .= '<td ' . $action . ' style="color:#f00;">-</td>';
                                    $this->container->__warn('No existe el campo externo que se intenta mostrar en el campo de la tabla ($aux[0][1]) ' . __METHOD__ . ',' . __LINE__ . ']');
                                }
                            }
                        } else {
                            $html .= '<td ' . $action . ' style="color:#f00;">[No encontrado]</td>';
                            $this->container->__warn('No existen los datos referenciados por el campo de id (' . $column_info[1] . ' = \'' . $row[$column_info[1]] . '\')');
                        }
                    } else {
                        if ($column_info[1] === "attachments") {
                            $aux = $this->select('attachments', "linked_table = '$table' AND linked_id = '$i'");
                            if ($aux) {
                                $attch_count = $aux['num_elements'];
                            } else {
                                $attch_count = 0;
                            }
                            $html .= '<td class="mdi" ' . $action . '>' . $attch_count . '<a href="javascript:void(0);" title="' . $this->container->lang->gt('Adjuntar nuevo archivo') . '" class="mdi btn_add_attch" data-i="' . $i . '"></a></td>';
                        } else {
                            foreach ($aux_col_info as $field) {
                                if ($field['Field'] === $column_info[1]) {
                                    if ($field['Type'] == "date") {
                                        if (is_null($row[$column_info[1]])) {
                                            $html .= "<td $action>-</td>";
                                        } else {
                                            $html .= "<td $action>" . $this->container->funcs->date_format($row[$column_info[1]], 1) . "</td>";
                                        }
                                    } elseif ($field['Type'] == "datetime") {
                                        if (is_null($row[$column_info[1]])) {
                                            $html .= "<td $action>-</td>";
                                        } else {
                                            $html .= "<td $action>" . $this->container->funcs->date_format($row[$column_info[1]], 4) . "</td>";
                                        }
                                    } elseif (substr($field['Type'], 0, 4) == "enum") {
                                        $values = explode(",", str_replace('\'', '', explode(")", explode("(", $field['Type'])[1])[0]));
                                        $labels = $field_config['value_labels'];
                                        $value_pos = array_search($row[$column_info[1]], $values, true);
                                        $value_label = ($value_pos !== false && isset($labels[$value_pos])) ? $labels[$value_pos] : $row[$column_info[1]];
                                        $html .= "<td $action>$value_label</td>";
                                    } else {
                                        $html .= "<td $action>" . $row[$column_info[1]] . "</td>";
                                    }
                                }
                            }
                        }
                    }
                }
                $html .= "</tr>";
            }$num_rows = count($rows);
            unset($aux, $aux_table, $aux_col_info, $field_config, $column);
        } else {
            $html .= "<tr><td></td><td colspan=\"" . (count($columns) - 1) . "\">En estos momentos no existen datos.</td></tr>";
            $num_rows = 0;
        }
        return $html;
    }

    public function create_table($table, $table_id_field = null, $external_config = null) {
        $html = $filter = "";
        if (!is_null($external_config)) {
            $this->get_table_config($table, $external_config);
        } else {
            $this->get_table_config($table);
        }

        // Creo filtro
        if (!empty($_SESSION['filter'][$table])) {
            foreach ($_SESSION['filter'][$table] as $name => $value) {
                if (is_null($value))
                    continue;
                if (substr($name, -3) === '_id') {
                    $filter .= " AND $name = '$value'";
                } else {
                    $filter .= " AND $name LIKE '%" . $value . "%'";
                }
            }
        }

        // Creo ordenado
        if (is_null($this->order_by) && !is_null($table_id_field)) {
            $order_query = "$table_id_field " . $this->order;
        } elseif (is_null($this->order_by)) {
            reset($this->tables_config[$table]);
            $order_query = key($this->tables_config[$table]) . " " . $this->order;
        } else {
            $order_query = $this->order_by . ' ' . $this->order;
        }

        $html .= '<table class="data_sheet" cellspacing="0" cellpadding="0" rel="' . $table . '">';
        // Creo header columnas
        $html .= '<thead><tr>';
        if(isset($external_config['multiSel']) && $external_config['multiSel'] == true){
            $html .= '<th data-sorter="false"></th>';
        }
        if(isset($external_config['attachments']) && $external_config['attachments'] == true){
            $html .= '<th data-sorter="false"></th>';
        }
        
        if(isset($external_config['notes']) && $external_config['notes'] == true){
            $html .= '<th data-sorter="false"></th>';
        }
        
        foreach ($this->columns[$table] as $field => $label) {
            $html .= '<th '
                    . ' data-placeholder="' . (isset($this->tables_config[$table][$field]['config']['placeholder']) ? $this->tables_config[$table][$field]['config']['placeholder'] : '') . '" '
                    . ' class="' . (isset($this->tables_config[$table][$field]['config']['th_class']) ? $this->tables_config[$table][$field]['config']['th_class'] : '') . '">';
            $html .= $this->container->lang->gt($label);
            $html .= '</th>';
        }
        $html .= '</tr></thead><tbody>';

        // Creo filas
        
        if(isset($_SESSION['temp_config'][$table]['page'])){
            $limit_subquery = ($this->max_rows_limit * ($_SESSION['temp_config'][$table]['page'] - 1)).', '.$this->max_rows_limit;
        } elseif(isset($external_config['page'])) {
            $limit_subquery = ($this->max_rows_limit * ($external_config['page'] - 1)).', '.$this->max_rows_limit;
        }else{
            $limit_subquery = $this->max_rows_limit;
        }
        
        $rows = $this->select($table, "1=1 $filter", $order_query . " LIMIT " .  $limit_subquery, false, false);
        if ($rows) {
            $aux_id_file = array_keys($this->tables_config[$table])[0];
            foreach ($rows as $row_num => $row) {
                $i = (!is_null($table_id_field)) ? $row[$table_id_field] : $row[$aux_id_file];
                $html .= "\n<tr ref=\"" . $i . "\" data-d=\"" . $this->container->funcs->encode(array('t' => $table, 'i' => $i)) . "\">";
                
                if(isset($external_config['multiSel']) && $external_config['multiSel'] == true){
                    $html .= "<td class=\"table__row-checkbox\"><input type=\"checkbox\" class=\"table__row-checkbox-input\" /></td>";
                }
                
                if(isset($external_config['attachments']) && $external_config['attachments'] == true){
                    if($external_config['attachments'] === 'icon_num'){
                        if($table === 'attachment_groups'){
                            $atts = $this->select('attachments', "attachment_groups_id = '$i'");
                        }else{
                            $atts = $this->select('system_row_attachments', "linked_table = '$table' AND linked_id = '$i'");
                        }
                        $atts_count = ($atts) ? $atts['num_elements'] : 0;
                    }
                    
                    $html .= "<td class=\"table__row-atts\"><span class=\"mdi mdi-attachment table__atts\" title=\"".$this->container->lang->gt('Archivos adjuntos')."\"></span>";
                    $html .= ($external_config['attachments'] === 'icon_num')?"<span class=\"table__atts-num\">$atts_count</span></td>":'';
                }
                
                if(isset($external_config['notes']) && $external_config['notes'] == true){
                    if($external_config['notes'] === 'icon_num'){
                        $notes = $this->select('system_row_notes', "linked_table = '$table' AND linked_id = '$i'");
                        $notes_count = ($notes) ? $notes['num_elements'] : 0;
                    }
                    
                    $html .= "<td class=\"table__row-notes\"><span class=\"mdi mdi-note table__notes\" title=\"".$this->container->lang->gt('Notas')."\"></span>";
                    $html .= ($external_config['notes'] === 'icon_num')?"<span class=\"table__notes-num\">$notes_count</span></td>":'';
                }
                
                foreach ($this->columns[$table] as $field => $label) {
                    $cell_action = (isset($this->tables_config[$table][$field]['config']['cell_action'])) ? ' data-action="' . $this->tables_config[$table][$field]['config']['cell_action'] . '" ' : '';
                    $html .= "<td $cell_action>";
                    if ($field === 'attachments') {
                        /*
                        $atts = $this->select('attachments', "linked_table = '$table' AND linked_id = '$i'");
                        $atts_count = ($atts) ? $atts['num_elements'] : 0;
                        $html .= '<td class="mdi" ' . $cell_action . '>' . $atts_count . '<a href="javascript:void(0);" title="' . $this->container->lang->gt('Adjuntar nuevo archivo') . '" class="mdi btn_add_attch" data-i="' . $i . '"></a></td>';
                         */
                    } elseif (substr($field, -3) === "_id") {
                        if (substr($field, 0, -3) === $table) {
                            $html .= $row[$field];
                            continue;
                        }
                        
                        $external_table = (isset($this->tables_config[$table][$field]['config']['external_table'])) ? $this->tables_config[$table][$field]['config']['external_table'] : substr($field, 0, -3);
                        if (isset($this->tables_config[$table][$field]['config']['external_field']) && strpos($this->tables_config[$table][$field]['config']['external_field'], '+') === false) {
                            $external_field = $this->tables_config[$table][$field]['config']['external_field'];
                        } elseif (isset($this->tables_config[$table][$field]['config']['external_field'])) {
                            $external_field = $this->tables_config[$table][$field]['config']['external_field'];
                        } else {
                            $external_field = $field;
                        }

                        if(isset($this->external_data[$external_table][$row[$field]])){
                            $html .= $this->external_data[$external_table][$row[$field]];
                        }else{
                            $external_data = $this->select($external_table, $external_table . "_id = '" . $row[$field] . "'", ""); //$external_field ASC LIMIT 1
                            if ($external_data) {
                                $this->get_table_config($external_table);
                                if (isset($this->tables_config[$table][$field]['config']['external_field'])) {
                                    if (strpos($this->tables_config[$table][$field]['config']['external_field'], '+') !== false) {
                                        $external_label = '';
                                        $tokens = explode('+', $external_field);
                                        foreach ($tokens as $token) {
                                            if (strlen($token) === 1) {
                                                $external_label .= $token . ' ';
                                            } else {
                                                $external_label .= $external_data[0][$token] . ' ';
                                            }
                                        }
                                        $external_label = substr($external_label, 0, -1);
                                        $html .= $external_label;
                                    } else {
                                        $html .= $external_data[0][$external_field];
                                    }
                                } else {
                                    reset($this->columns[$external_table]);
                                    $first_key = key($this->columns[$external_table]);

                                    if (!is_null($first_key) && isset($row[$first_key])) {

                                        // ..Formateador de celdas..
                                        $html .= $this->format_external_field_label($external_table, $first_key, $row);
                                        $this->external_data[$external_table][$row[$field]] = $this->format_external_field_label($external_table, $first_key, $row);
                                        //$html .= $row[$first_key];
                                    } else {
                                        $html .= '<span style="color:red;">[Fallo campo externo]</span>';
                                        $this->external_data[$external_table][$row[$field]] = '<span style="color:red;">[Fallo campo externo]</span>';
                                        $this->container->__warn('No se ha podido encontrar un campo de la tabla externa que represente la información en la celda de la tabla ($aux[0][1]) ' . __METHOD__ . ',' . __LINE__ . ']');
                                    }
                                }
                            } else {
                                $html .= '<span style="color:red;">[Datos no encontrados]</span>';
                                $this->external_data[$external_table][$row[$field]] = '<span style="color:red;">[Datos no encontrados]</span>';
                                $this->container->__warn('No existen los datos referenciados por el campo de id (' . $field . ' = \'' . $row[$field] . '\')');
                            }
                        }
                    } else {
                        if(!isset($row[$field]) && isset($external_config['cols-config'][$field])){
                            if(isset($external_config['cols-config'][$field]['cell_template']) && strlen($external_config['cols-config'][$field]['cell_template']) >= 1){
                                if(preg_match_all('/##([A-Za-z0-9_ñÑ _\-\.\(\)\[\]\'\=\>\,\"]*)##/', $external_config['cols-config'][$field]['cell_template'], $keys)){
                                    $search = $replace = [];
                                    $aux_html = $aux_html2 = '';
                                    foreach($keys[1] as $key){
                                        if(isset($row[$key])){
                                            $search[] = '##'.$key.'##';
                                            $replace[] = $row[$key];
                                        }elseif($key === 'row_data-d'){
                                            $search[] = '##'.$key.'##';
                                            $replace[] = $this->container->funcs->encode(array('t' => $table, 'i' => $i));
                                        }elseif($key === 'row_i'){
                                            $search[] = '##'.$key.'##';
                                            $replace[] = $i;
                                        }else{
                                            $search[] = '##'.$key.'##';
                                            $replace[] = "''"; 
                                        }
                                    }
                                    
                                    $aux_html = str_replace($search, $replace, $external_config['cols-config'][$field]['cell_template']);
                                    
                                    if(preg_match_all('/#=([A-Za-z0-9_ñÑ _\-\.\(\)\[\]\'\=\>\,\"]*)=#/', $aux_html, $keys2)){
                                        $search = $replace = [];
                                        foreach($keys2[1] as $key){
                                            $search[] = '#='.$key.'=#';
                                            
                                            if(substr($key,0,1) === '[' && substr($key,-1,1) === ']'){
                                                $key = eval('return '.$key.';');
                                            }
                                            
                                            $replace[] = $this->container->funcs->encode($key);
                                        }
                                    }
                                    $aux_html2 = str_replace($search, $replace, $aux_html);
                                    
                                    $html .= $aux_html2;
                                }else{
                                    $html .= "-";
                                }
                                
                            }else{
                                $html .= "";
                            }
                        }elseif(is_null($row[$field])) {
                            $html .= "-";
                        } else {
                            
                            if(isset($this->tables_config[$table][$field]['config']['value_format']) && strlen($this->tables_config[$table][$field]['config']['value_format']) >= 2){
                                
                                switch($this->tables_config[$table][$field]['config']['value_format']){
                                    case 'color':
                                        if(isset($this->tables_config[$table][$field]['config']['value_format_aux'][(string)$row[$field]])){
                                            $html .= '<div class="table__value-format-color" style="background:'.$this->tables_config[$table][$field]['config']['value_format_aux'][$row[$field]].';">'.$row[$field].'</div>';
                                        }elseif(substr($row[$field],0,1) == '#'){
                                            $html .= '<div class="table__value-format-color" style="background:'.$row[$field].';">'.$row[$field].'</div>';
                                        }else{
                                            $html .= $row[$field];
                                        }
                                        break;
                                    case 'date':
                                        $html .= '<span class="table__value-format-date">'.date($this->tables_config[$table][$field]['config']['value_format_aux'],strtotime($row[$field])).'</span>';
                                        break;
                                    case 'icon':
                                        $this->container->__warn($this->tables_config[$table][$field]['config']['value_format_aux']);
                                        if(isset($this->tables_config[$table][$field]['config']['value_format_aux'][(string)$row[$field]])){
                                            $html .= '<span class="table__value-format-icon mdi '.$this->tables_config[$table][$field]['config']['value_format_aux'][(string)$row[$field]].'"></span>';
                                        }else{
                                            $html .= $row[$field];
                                        }
                                        
                                        break;
                                    case 'sparkline':
                                        $html .= '<div class="table__value-format-sparkline">'.$row[$field].'</div>';
                                        break;
                                    case 'wysiwyg':
                                        $html .= $row[$field];
                                        break;
                                    default:
                                        $html .= $row[$field];
                                        $this->container->__warn('Formato de valor no reconocido. ('.$this->tables_config[$table][$field]['config']['value_format'].')');
                                }
                            }else{
                                switch ($this->tables_config[$table][$field]['type']) {
                                    case 'date':
                                        $html .= $this->container->funcs->date_format($row[$field], 1);
                                        break;
                                    case 'datetime':
                                        $html .= $this->container->funcs->date_format($row[$field], 4);
                                        break;
                                    case 'enum':
                                        $values = $this->tables_config[$table][$field]['size'];
                                        $labels = (isset($this->tables_config[$table][$field]['config']['value_labels'])) ? $this->tables_config[$table][$field]['config']['value_labels'] : array();
                                        
                                        $value_pos = array_search($row[$field], $values, true);
                                        $value_label = ($value_pos !== false && isset($labels[$value_pos])) ? $labels[$value_pos] : $row[$field];
                                        $html .= $value_label;
                                        break;
                                    default:
                                        $html .= $row[$field];
                                }
                            }
                        }
                    }
                    $html .= '</td>';
                }
                $html .= '</tr>';
            }
        }
        $html .= '</tbody></table>';

        return $html;
    }

    /**
     * Function that parses table info and creates an internal array with table config CACHE.
     * 
     * Model:
     * $this->tables_config[TABLE][FIELD_NAME][type]: Field type from MySQL table (ex. INT,VARCHAR,ENUM,DATE,...).
     *                                        [size]: Field size or values (ex. 11, 255, ['Yes','No'],...).
     *                                        [config]: Array parsed from field comment with function '$this->field_config'.
     *                                        [default_value]: Default value of field.
     *                                        [detail]: Array with all data from the field info. From function '$this->get_columns_info'.
     * 
     * @param string $table Target table name
     */
    public function get_table_config($table, $external_config = null) {
        if (!empty($this->tables_config[$table])) {
            return true;
        }
        $table_fields = $this->get_columns_info($table);
        
        // Columnas virtuales
        if(!is_null($external_config)){
            foreach($external_config['cols-config'] as $name => $col){
                $located = false;
                foreach($table_fields as $field){
                    if($field['Field'] == $name){
                        $located = true;
                        break;
                    }
                }
                if($located === false){
                    $table_fields[] = [
                        'Field' => $name,
                        'Type' => 'text',
                        'Comment' => 'Column:'.$name,
                        'Default' => ''
                        ];
                }
            }
        }
        
        foreach ($table_fields as $field) {
            $this->tables_config[$table][$field['Field']]['config'] = $this->field_config($field['Comment']);
            if (!is_null($external_config) && isset($external_config['cols-config'][$field['Field']])) {
                foreach ($external_config['cols-config'][$field['Field']] as $name => $value) {
                    if(strpos($value,'|') !== false){ // Quito esta parte porque no se el motivo de añadirla "|| strpos($value,'=') !== false"
                        $aux_labels = explode('|', $value);
                        $aux2 = [];
                        foreach ($aux_labels as $num => $label) {
                            if(strpos($label,'=') !== false){
                                $aux_format = explode('=',$label);
                                
                                $aux2[(string)$aux_format[0]] = $aux_format[1];

                            }else{
                                if (defined(LANG_IN_USE) && LANG_IN_USE !== false) {
                                    $aux2[$num] = $this->container->lang->gt($label);
                                }else{
                                    $aux2[$num] = $label;
                                }
                            }
                        }
                        
                        $this->tables_config[$table][$field['Field']]['config'][$name] = $aux2;
                    }else{
                        $this->tables_config[$table][$field['Field']]['config'][$name] = $value;
                    }
                }
            }
            $field_type = (strpos($field['Type'], ') ') !== false) ? substr($field['Type'], 0, strpos($field['Type'], ') ') + 1) : $field['Type'];
            if (strpos($field_type, '(') !== false) {
                preg_match_all('/^(.*)\((.+)\)/m', $field_type, $aux_type);
                $aux_type = array($aux_type[1][0], $aux_type[2][0]);
            } else {
                $aux_type = array($field_type);
            }
            $this->tables_config[$table][$field['Field']]['type'] = $aux_type[0]; //Puede tener valor entre parentesis o nada.
            $this->tables_config[$table][$field['Field']]['size'] = (isset($aux_type[1])) ? explode(',', $aux_type[1]) : null;
            if (is_array($this->tables_config[$table][$field['Field']]['size'])) {
                array_walk($this->tables_config[$table][$field['Field']]['size'], function(&$value, $clave) {
                    $value = str_replace('\'', '', $value);
                });
            }

            $this->tables_config[$table][$field['Field']]['default'] = $field['Default']; //Puede tener valor entre parentesis o nada.
            $this->tables_config[$table][$field['Field']]['detail'] = $field;
        }

        $this->create_table_columns($table,$external_config);
    }

    public function add_table_column($name, $config, $table, $order = null) {

        $final_config = array(
            'Field' => $name,
            'Type' => 'attachments',
            'Collation' => 'utf8_spanish2_ci',
            'Null' => 'YES',
            'Key' => '',
            'Default' => NULL,
            'Extra' => '',
            'Privileges' => 'select,insert,update,references',
            'Comment' => 'label:' . $name . ',cell_action:attachment'
        );

        if (!is_null($order)) {
            $final_config['Comment'] .= 'column_order:' . $order;
        }

        $this->manual_columns[$table] = null;
    }

    /**
     * Crea los arrays con las columnas de las tablas cortas y largas.
     * 
     * Las columnas se ordenan según las siguientes directrices:
     * - Si no se ha especificado una posición de orden en ninguna columna, siguen el orden en que estan definidas en la tabla.
     * - Si se define una posición en algun campo:
     *      · Los campos con orden definido se intentan ordenar de menor a mayor empleando las posiciones definidas. La posición final no tiene porqué coincidir con la especificada a menos que todos los campos de la tabla tengan definida una posición y ninguno repita la opsición de otro campo.
     *      · Si dos campos definen la misma posición en el orden, primero se colocará el campo que se encuentre antes en el orden en que fueron definidos en la tabla. Los siguientes irán sucesivamente.
     *      · Los restantes campos que no tengan definida su posición se añadirán a continuación de los que si la tenían definida, en el orden en que fueron definidos en la tabla.
     * 
     * - El nombre de las columnas que irán en la tabla se toma de los campos de configuración correspondientes y si no está definido, se muestra el nombre del campo en la tabla. La precedencia es la siguiente:
     *      · short_column > column > FIELD_NAME
     * 
     * - En el caso de querer ocultar una columna, hacerlo definiendo 'column:no'.
     * 
     * - En caso de más de un campo de configuración, la precedencia es la siguiente:
     *      · short_column > column:no > column
     * 
     * - Dos columnas no pueden tener definido en la configuración (comentario) la misma etiqueta label, provoca comportamiento errático.
     * 
     * @param string $table
     * @return array
     */
    private function create_table_columns($table, $external_config = null) {
        $short_columns = $columns = $cols = $cols2 = array();
        $keys = array();
        $this->short_columns[$table] = array();
        $this->columns[$table] = array();
        
        foreach ($this->tables_config[$table] as $key => $field) {
            $column_order = null;
            if (isset($field['config']['column_order'])) {
                $column_order = intval($field['config']['column_order']);
            }

            if (isset($field['config']['short_column'])) {
                if (is_null($column_order)) {
                    $cols[] = $field['config']['short_column'];
                } else {
                    $short_columns[$column_order][] = $field['config']['short_column'];
                }
            }

            if (isset($field['config']['short_column']) && $field['config']['short_column'] != 'no') {
                $col_name = $field['config']['short_column'];
            } elseif (isset($field['config']['column']) && $field['config']['column'] != 'no') {
                $col_name = $field['config']['column'];
            } elseif (isset($field['config']['label'])) {
                $col_name = $field['config']['label'];
            } else {
                $col_name = $key;
            }

            $keys[$col_name] = $key;
            
            
            
            if ((isset($field['config']['column']) && $field['config']['column'] === 'no') || (isset($external_config['cols-config'][$key]['column']) && $external_config['cols-config'][$key]['column'] === 'no')) {
                continue;
            }

            if (is_null($column_order)) {
                $cols2[] = $col_name;
            } else {
                $columns[$column_order][] = $col_name;
            }
        }

        $aux1 = $aux2 = array();

        foreach ($short_columns as $pos => $subcol) {
            foreach ($subcol as $subpos => $field) {
                if (isset($aux1[$pos])) {
                    $aux1[$pos] = $field;
                } else {
                    $aux1[] = $field;
                }
            }
        }

        $short_columns = $aux1 + $cols;
        ksort($short_columns);
        
        foreach($short_columns as $k => $scol){
            $this->short_columns[$table][$keys[$scol]] = $scol;
        }

        foreach ($columns as $pos => $subcol) {
            foreach ($subcol as $subpos => $field) {
                if (isset($aux2[$pos])) {
                    $aux2[] = $field;
                } else {
                    $aux2[$pos] = $field;
                }
            }
        }

        $columns = $aux2 + $cols2;
        ksort($columns);
        
        foreach($columns as $k => $col){
            $this->columns[$table][$keys[$col]] = $col;
        }
        
        
    }

    private function format_external_field_label($table, $field, $row) {
        $this->get_table_config($table);
        if (isset($this->tables_config[$table][$field]['config']['external_field'])) {
            if (strpos($this->tables_config[$table][$field]['config']['external_field'], '+') !== false) {
                $field_label = '';
                $tokens = explode('+', $this->tables_config[$table][$field]['config']['external_field']);
                foreach ($tokens as $token) {
                    if (strlen($token) === 1) {
                        $field_label .= $token . ' ';
                    } else {
                        if (substr($token, -3) === "_id") {
                            //$sub_table = substr($token, 0, -3);
                            //$this->get_table_config($sub_table);
                            //$fields = $this->get_columns_info($external_field_config['external_table']);      

                            if (isset($this->tables_config[$table][$token]['config']['external_table'])) {
                                $ext_table = $this->tables_config[$table][$token]['config']['external_table'];
                            } else {
                                $ext_table = substr($token, 0, -3);
                            }
                            $this->get_table_config($ext_table);

                            $token_info = $this->select($ext_table, "$token = '$row[$token]'", "$token ASC LIMIT 1");
                            if ($token_info) {
                                if (!is_null($this->tables_config[$ext_table][$token]['config'])) {
                                    $field_label .= $this->format_external_field_label($ext_table, $token, $token_info[0]);
                                } else {
                                    $field_label .= $token_info[0][$token] . ' ';
                                }
                            } else {
                                $this->container->__warn('No ha sido posible recuperar la información del campo externo de segundo nivel. external_table: ' . $ext_table . ' external_field: ' . $token);
                                $field_label .= '#' . $row[$token] . ' -No encontrado- ';
                            }
                        } else {
                            $field_label .= $row[$token] . ' ';
                        }
                    }
                }
                return substr($field_label, 0, -1);
            } else {
                return $row[$this->tables_config[$table][$field]['config']['external_field']];
            }
        } else {
            return $row[$field];
        }
    }

}
